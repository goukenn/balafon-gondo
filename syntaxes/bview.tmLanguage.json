{
    "scopeName": "source.bview",
    "patterns": [
        {
            "include": "#comment-block"
        },
        {
            "include": "#double-quote-with-mustache-string"
        },
        {
            "include": "#section-block"
        },
        {
            "include": "#selector-tag"
        }
    ],
    "repository": {
        "section-block": {
            "begin": "([^\\{]+)\\s*\\{(?:($|\\s*))",
            "end": "\\}" ,
            "name": "meta.section.expression.bview",
            "beginCaptures": {
                "1": {
                    "patterns": [
                        {
                            "include": "#selector-tag"
                        }
                    ]
                }
            },
            "patterns": [ 
               
                {
                    "include": "#section-patterns"
                }, 
               
                {
                    "include": "#section-block"
                }
               
            ]
        },
        "section-inner-block":{
            "begin": "\\s*\\{(?:($|\\s*))",
            "end": "\\}" ,
            "name": "meta.section.expression.bview", 
            "patterns":[{
                "include": "#section-patterns"
            }, 
            {
                "include": "#section-block"
            }]
        },
        "section-patterns":{
            "patterns": [ 
                {
                    "include": "#comment-block"
                },
                {
                    "include": "#conditional-expression"
                },
                {
                    "include": "#tag-content"
                },
                {
                    "include": "#mustache-expression"
                },
                {
                    "include": "#tag-append-single"
                },
                {
                    "include": "#active-attributes"
                }
            ]
        },
        "mustache-expression": {
            "begin": "\\{\\{(?=[^\\{])",
            "end": "(?<=[^\\}])\\}\\}",
            "name": "meta.mustache.bview",
            "beginCaptures": {
                "0": {
                    "name": "meta.mustache.start.bview"
                }
            },
            "endCaptures": {
                "0": {
                    "name": "meta.mustache.end.bview"
                }
            },
            "contentName": "meta.mustache.expression.bview"
        },
        "comment-block": {
            "name": "comment.block.bview",
            "begin": "\\/\\*",
            "end": "\\*\\/"
        },
        "tagname": {
            "match": "(?i)([a-z_]+[a-z0-9:\\-_]*)",
            "comment": "selector tagname",
            "name": "constant.selector.tagname.bview"
        },
        "tag-class": {
            "match": "(?i)\\.((-+)?[a-z_]+((\\\\:)?[a-z0-9\\-_]+)*)",
            "comment": "selector tagname class",
            "name": "constant.selector.tagname.class.bview"
        },
        "tag-name": {
            "match": "(?i)\\#([a-z_]+[a-z0-9\\-_]*)",
            "comment": "selector tagname class. name value",
            "name": "constant.selector.tagname.name.bview"
        },
        "tag-id": {
            "match": "(?i)\\%([a-z_]+[a-z0-9\\-_]*)",
            "comment": "selector identifier. id attribute",
            "name": "constant.selector.tagname.id.bview"
        },
        "tag-glue": {
            "match": "\\s*\\>\\s*",
            "comment": "append tag",
            "name": "operator.append.tagname.bview"
        },
        "selector-tag": {
            "name": "meta.tagname.selector.bview",
            "patterns": [
                {
                    "include": "#tagname"
                },
                {
                    "include": "#tag-class"
                },
                {
                    "include": "#tag-name"
                },
                {
                    "include": "#tag-id"
                },
                {
                    "include": "#tag-active-attrib"
                },
                {
                    "include": "#tag-attrib"
                },
                {
                    "include": "#tag-func"
                },
                {
                    "include": "#tag-glue"
                },
                {
                    "include": "#section-inner-block"
                }
            ]
        },
        "tag-attrib": {
            "comment": "tagname attribute definition-only one per tagname definition",
            "begin": "(?<=[^\\s])\\[",
            "end": "\\]",
            "name": "meta.tagname.attribute.bview",
            "contentName": "tagname.attributes.definition.bview",
            "beginCaptures": {
                "0": {
                    "name": "brank.array.start.bview"
                }
            },
            "endCaptures": {
                "0": {
                    "name": "brank.array.end.bview"
                }
            },
            "patterns": [
                {
                    "include": "#attribute-expression-separator"
                },
                {
                    "name": "tagname.attribute.active.inline.bview",
                    "match": "\\s*(@[a-zA-Z_]([a-zA-Z_:0-9\\-]+)?)(\\s+@[a-zA-Z_]([a-zA-Z_:0-9\\-]+)?)*\\s*"
                },
                {
                    "name": "meta.attribute.parameter.bview",
                    "begin": "(?i)([a-z_-]([a-z0-9_-]+)?)(\\s*(:)\\s*)?",
                    "end": "(?=(,|\\]))",
                    "beginCaptures": {
                        "1": {
                            "name": "meta.attribute.parameter.name.bview"
                        },
                        "4": {
                            "name": "meta.punctuation.array.separator.bview"
                        }
                    },
                    "contentName": "meta.attribute.parameter.value.bview",
                    "patterns": [
                        {
                            "comment":"Import first punctuation",
                            "match":"\\s*(:)\\s*",
                            "captures":{
                                "1": { "name":"meta.punctuation.array.separator.bview"}
                            }
                        },
                        {
                            "include": "#number"
                        },
                        {
                            "include": "#string-with-mustache"
                        } 
                    ]
                },
                {
                    "include": "#string"
                }
            ]
        },
        "tag-func": {
            "comment": "tagname function litteral - only one per tagname definition",
            "begin": "(?<=[^\\s])\\(",
            "end": "\\)",
            "name": "meta.tagname.func.bview",
            "contentName": "tagname.func.bview",
            "patterns": [
                {
                    "include": "#expression-separator"
                },
                {
                    "name": "func.args",
                    "patterns": [
                        {
                            "include": "#hex-number"
                        },
                        {
                            "include": "#number"
                        },
                        {
                            "include": "#string"
                        },
                        {
                            "name": "litteral.args.bview",
                            "begin": "\\s*\\[\\[:@(raw|ctrl)",
                            "end": "\\]\\]",
                            "contentName": "litteral.args.expression.bview",
                            "patterns": [
                                {
                                    "include": "source.php"
                                }
                            ]
                        },
                        {
                            "include": "#hex-color"
                        },
                        {
                            "name": "constant.litteral.args.bview",
                            "comment": "use for href",
                            "match": "(?i)#([a-z0-9]+)?"
                        },
                        {
                            "include": "#url"
                        }
                    ]
                }
            ]
        },
        "tag-active-attrib": {
            "match": "(?i)\\!([a-z_]+[a-z0-9\\-_]*)",
            "comment": "selector identifier. id attribute",
            "name": "constant.selector.tagname.active.attrib.bview"
        },
        "number": {
            "name": "constant.numeric.bview",
            "match": "((\\d+)?\\.\\d+)|(\\d+)(\\.\\d+)?"
        },
        "hex-number": {
            "name": "constant.numeric.bview",
            "match": "(?i)0x([a-f0-9]+)?"
        },
        "hex-color": {
            "name": "constant.litteral.args.hexcolor.bview",
            "match": "(?i)#([a-f0-9]{8}|[a-f0-9]{6}|[a-f0-9]{4})"
        },
        "url": {
            "name": "constant.url.bview",
            "match": "(?i)(((ftp|http(s)|[a-z]+)?:\\/\\/)|(\\.))[^\\s\\/\\)]+(\\/[^\\s\\/\\)]+)*"
        },
        "expression-separator": {
            "name": "punctuation.operator.bview",
            "match": "\\s*,\\s*"
        },
        "attribute-expression-separator":{
            "name":"punctuation.attribute.array.separator.bview",
            "match":"\\s*,\\s*"
        },
        "tag-append-single": {
            "begin": "\\s*\\+ ",
            "end": "$",
            "name": "meta.append.single.node.bview",
            "patterns": [
                {
                    "include": "#selector-tag"
                }
            ]
        },
        "tag-content": {
            "begin": "\\s*- ",
            "end": "$",
            "name": "meta.tag.content.expression.bview",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.start.content.expression.bview"
                }
            },
            "patterns": [
                {
					"include": "#mark-fn-support"
				},
                {
                    "include": "#string-with-mustache"
                },
                {
                    "include": "#expression-constant"
                }
               
            ]
        },
        "active-attributes": {
            "name": "parameter.attribute.active.bview",
            "match": "(^|\\)|\\])?\\s*(@[a-zA-Z_]([a-zA-Z_:0-9\\-]+)?)(\\s+@[a-zA-Z_]([a-zA-Z_:0-9\\-]+)?)*\\s*$"
        },
        "expression-constant": {
            "name": "constant.expression.bview",
            "patterns": [
                {
                    "include": "#string-with-mustache"
                },
                {
                    "include": "#litteral-constant-non-mustache"
                },
                {
                    "include": "#mustache-expression"
                }
            ]
        },
        "conditional-expression": {
            "begin": "(^|\\)|\\]|\\s*)?(?<exp>\\*if)\\s*(:)",
            "end": "$",
            "name": "condition.bview",
            "beginCaptures": {
                "2": {
                    "name": "conditional.operator.bview"
                },
                "3": {
                    "name": "punctuation.operator.bview"
                }
            },
            "patterns": [
                {
                    "name": "conditional.expression.bview",
                    "patterns": [
                        {
                            "include": "#litteral-constant-non-mustache"
                        },
                        {
                            "include": "#mustache-expression"
                        },
                        {
                            "include": "#mustache-content-expression"
                        }
                    ]
                }
            ]
        },
        "string": {
            "patterns": [
                {
                    "include": "#single-quote-string"
                },
                {
                    "include": "#double-quote-string"
                }
            ]
        },
        "string-with-mustache": {
            "patterns": [
                {
                    "include": "#single-quote-with-mustache-string"
                },
                {
                    "include": "#double-quote-with-mustache-string"
                }
            ]
        },
        "single-quote-string": {
            "begin": "'",
            "end": "'",
            "name": "string.single.quoted.bview",
            "patterns": [
                {
                    "name": "constant.escaped.string",
                    "match": "\\\\."
                }
            ]
        },
        "double-quote-with-mustache-string": {
            "begin": "\"",
            "end": "\"",
            "name": "string.quoted.with.mustache.bview",
            "patterns": [
                {
                    "name": "constant.escaped.string",
                    "match": "\\\\."
                },
                {
                    "include": "#mustache-expression"
                }
            ]
        },
        "single-quote-with-mustache-string": {
            "begin": "'",
            "end": "'",
            "name": "string.single.quoted.bview",
            "patterns": [
                {
                    "name": "constant.escaped.string",
                    "match": "\\\\."
                },
                {
                    "include": "#mustache-expression"
                }
            ]
        },
        "double-quote-string": {
            "begin": "\"",
            "end": "\"",
            "name": "string.quoted.bview",
            "patterns": [
                {
                    "name": "constant.escaped.string",
                    "match": "\\\\."
                }
            ]
        },
        "mustache-content-expression": {
            "name": "constant.mustache.content.expression.bview",
            "patterns": [
                {
                    "match": "[^\\{]+",
                    "name": "constant.concat.mustache.bview"
                },
                {
                    "include": "#mustache-expression"
                }
            ]
        },
        "litteral-constant-non-mustache": {
            "comment": "litteral expression without mustache expression",
            "name": "constant.litteral.expression.bview",
            "match": "[^\\{]+"
        },

        "mark-html": {
			"begin": "\\bhtml\\s*\\(",
			"end": "\\)",
			"endCaptures": {
				"0": {
					"name": "func.name.end.bview"
				}
			},
			"beginCaptures": {
				"0": {
					"name": "support.function.func.name.bview"
				}
			},
			"name": "highlight.html.bview",
			"patterns": [
				{
					"include": "text.html.basic"
				}
			]
		},
		"mark-css": {
			"begin": "\\bcss\\s*\\(",
			"end": "\\)",
			"endCaptures": {
				"0": {
					"name": "func.name.end.bview"
				}
			},
			"beginCaptures": {
				"0": {
					"name": "support.function.func.name.bview"
				}
			},
			"name": "highlight.css.bview",
			"patterns": [
				{
					"include": "source.css"
				}
			]
		},
		"mark-gql": {
			"name":"highlight.gql.bview",
			"begin":"gql\\s*\\(",
			"end":"\\)",
			"endCaptures": {
				"0": {
					"name": "func.name.end.bview"
				}
			},
			"beginCaptures": {
				"0": {
					"name": "support.function.func.name.bview"
				}
			},
			"patterns": [
				{"include": "source.graphql"}
			]
		},
		"mark-jsx":{
			"name":"highlight.jsx.bview",
			"begin":"\\bjsx\\s*\\(",
			"end":"\\)",
			"endCaptures": {
				"0": {
					"name": "func.name.end.bview"
				}
			},
			"beginCaptures": {
				"0": {
					"name": "support.function.func.name.bview"
				}
			},
			"patterns": [
				{"include": "source.js.jsx"}
			]
		},
		"mark-tsx":{
			"name":"highlight.tsx.bview",
			"begin":"tsx\\s*\\(",
			"end":"\\)",
			"endCaptures": {
				"0": {
					"name": "func.name.end.bview"
				}
			},
			"beginCaptures": {
				"0": {
					"name": "support.function.func.name.bview"
				}
			},
			"patterns": [
				{"include": "source.tsx"}
			]
		},
		"mark-vue":{
			"name":"highlight.vue.bview",
			"comment": "mark vue content SFC",
			"begin":"vue\\s*\\(",
			"end":"\\)",
			"endCaptures": {
				"0": {
					"name": "func.name.end.bview"
				}
			},
			"beginCaptures": {
				"0": {
					"name": "support.function.func.name.bview"
				}
			},
			"patterns": [
				{"include": "source.vue"}
			]
		},
		"mark-js":{
			"name":"highlight.js.bview",
			"begin":"js\\s*\\(",
			"end":"\\)\\s*",
			"endCaptures": {
				"0": {
					"name": "func.name.end.bview"
				}
			},
			"beginCaptures": {
				"0": {
					"name": "support.function.func.name.bview"
				}
			},
			"patterns": [
				{"include": "source.js"}
			]
		},
        "mark-svg":{
			"name":"highlight.svg.bview",
			"begin":"\\bsvg\\s*\\(",
			"end":"\\)\\s*",
			"endCaptures": {
				"0": {
					"name": "func.name.end.bview"
				}
			},
			"beginCaptures": {
				"0": {
					"name": "support.function.func.name.bview"
				}
			},
			"patterns": [
				{"include": "text.html.basic"}
			]
		},
        "mark-fn-support": {
			"comment": "mark function call support",  
			"name":"mark.function.support.bview",
			"patterns": [
				{
					"include": "#mark-html"
				},
				{
					"include": "#mark-css"
				}, 
				{
					"include": "#mark-svg"
				},
				{
					"include": "#mark-js"
				},
				{
					"include": "#mark-tsx"
				},
				{
					"include": "#mark-gql"
				},
				{
					"include": "#mark-vue"
				},
				{
					"begin": "\\b(local)\\b\\s*\\(",
					"end":"\\)",
					"beginCaptures": {
						"1":{"name":"support.function.func.name.bview"}
					},
					"endCaptures": {
						"0":{"name":"func.name.end.bview"}
					},
					"name":"expression.in.func.bview"
				}
			]
		},
		"function-litteral": {
			"name": "function.litteral.bview",
			"begin": "\\b\\w+\\(",
			"end": ")\\s*$",
            "beginCaptures": {
                "1":{"name":"support.function.func.name.bview"}
            },
            "endCaptures": {
                "0":{"name":"func.name.end.bview"}
            },
            "contentName":"func.expression.bview"
		}
    }
}