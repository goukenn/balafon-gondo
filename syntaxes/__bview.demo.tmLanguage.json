{
    "name": "bview demo",
    "patterns": [
        { "include":"#comment-block"},
        {
            "include": "#block-zone"
        }
    ],
    "repository": {
        "block-zone": {
            "begin": "(.+)?\\s*\\{",
            "end": "\\}",
            "name": "meta.zone.source.demo",
            "patterns": [
                {"include": "#active-attributes"},
                {"include": "#comment-block"},
                {"include": "#conditional-expression"},
                {"include": "#string"},
                {"include": "#block-zone"}
            ]
        },
        "comment-block":{
            "name":"comment.block.demo.bview",
            "begin" :"\\/\\*",
            "end":"\\*\\/"
        },
        "string":{
            "patterns":[{
                "include":"#single-quote-string"
            },{
                "include":"#double-quote-string"
            }]
        },
        "single-quote-string":{
            "begin":"'",
            "end":"'",
            "name":"string.single.quoted.demo.bview",
            "patterns":[{
                "name":"constant.escaped.string",
                "match":"\\\\."
            }]
        },
        "double-quote-string":{
            "begin":"\"",
            "end":"\"",
            "name":"string.quoted.demo.bview",
            "patterns":[{
                "name":"constant.escaped.string",
                "match":"\\\\."
            }]
        },
        "active-attributes":{
            "name":"parameter.attribute.active.demo.bview",
            "match":"(^|\\)|\\])?\\s*(@[a-zA-Z_]([a-zA-Z_:0-9\\-]+)?)(\\s+@[a-zA-Z_]([a-zA-Z_:0-9\\-]+)?)*\\s*$"
        },
        "conditional-expression":{
            "match":"(^|\\)|\\])?(?<exp>\\*if)\\s*(:)\\s*(?<expression>.+)$",
            "name":"condition.demo.bview",
            "captures":{
                "2":{
                    "name":"conditional.operator.demo.bview"
                },
                "3":{
                    "name":"ponctuation.operator.demo.bview"
                },
                "4":{
                    "name":"conditional.expression.demo.bview",
                    "patterns":[{
                        "include":"mustache-eval-expression"
                    }]
                }
            }
        },
        "mustache-string-expression":{
            "begin":"\\{\\{",
            "end":"\\}\\}",
            "contentName":"string.expression.demo.bview"
        },
        "mustache-eval-expression":{
            "begin":"\\{\\{",
            "end":"\\}\\}",
            "contentName":"eval.expression.demo.bview"
        }

    },
    "scopeName": "source.demo.bview"
}