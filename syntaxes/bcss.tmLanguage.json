{
    "scopeName": "source.bcss",
    "patterns": [
        {
            "include": "#comment"
        },
        {
            "include": "#single-line-comment"
        },
        {
            "include": "#describ-comment"
        },
        {
            "include": "#page-rule"
        },
        {
            "include": "#list-rule"
        },
        {
            "include": "#supports-rule"
        },
        {
            "include": "#keyframes-rule"
        },
        {
            "include": "#color-profile-rule"
        },
        {
            "include": "#container-rule"
        },
        {
            "include": "#media-rule"
        },
        {
            "include": "#font-face-rule"
        },
        {
            "include": "#charset-rule"
        },
        {
            "include": "#document-rule"
        },
        {
            "include": "#font-feature-values-rule"
        },
        {
            "include": "#layer-rule"
        },
        {
            "include": "#property-rule"
        },
        {
            "include": "#counter-style-rule"
        },
        {
            "include": "#namespace-rule"
        },
        {
            "include": "#global-directive"
        },
        {
            "include": "#root-property"
        }
    ],
    "repository": {
        "root-property": {
            "comment": "no.name property detection",
            "patterns": [
                {
                    "include": "#inline-selector"
                },
                {
                    "include": "#block-capture"
                }
            ]
        },
        "inline-selector": {
            "match": "(((\\>|\\+|~|,)\\s*)?(\\*|::root|\\.[\\-\\w]+(\\\\:[\\-\\w]+)?|((#)?[\\-\\w]+)+)(\\[.*\\])*(:{1,2}[\\-a-z][a-z0-9\\-]*)*\\s*)+",
            "name": "constant.selector.bcss",
            "contentName": "inline.def",
            "captures": {
                "0": {
                    "name": "constant.start.capture.bcss",
                    "patterns": [
                        {
                            "match": "(?i)\\.[\\-\\w]+(\\\\:[\\-\\w]+)?",
                            "name": "native.css.type.class.bcss",
                            "comment": "match class definition"
                        },
                        {
                            "match": "(?i)#[\\-\\w]+",
                            "name": "native.css.type.id.bcss"
                        },
                        {
                            "match": "(?i):{1,2}[\\-\\w]+",
                            "name": "native.css.type.pseudo.class.bcss"
                        },
                        {
                            "match": ",",
                            "name": "punctuation.separator.bcss"
                        },
                        {
                            "match": "~|\\+|\\>",
                            "name": "punctuation.selector.bcss"
                        },
                        {
                            "include": "#brank-selection"
                        },
                        {
                            "include": "#speudo-func-selection"
                        },
                        {
                            "include": "#block-capture"
                        }
                    ]
                }
            }
        },
        "block-capture": {
            "begin": "\\{",
            "end": "\\}",
            "name": "meta.block.capture.bcss",
            "endCaptures": {
                "0": {
                    "name": "meta.block.end.capture.bcss"
                }
            },
            "patterns": [
                {
                    "include": "#inside-block"
                }
            ]
        },
        "comment": {
            "comment": "multiline comment",
            "name": "comment.bcss",
            "begin": "\\/\\*",
            "end": "\\*\\/"
        },
        "single-line-comment": {
            "comment": "multiline comment",
            "name": "comment.single.bcss",
            "begin": "\\/\\/",
            "end": "$"
        },
        "string": {
            "patterns": [
                {
                    "include": "#single-quote-string"
                },
                {
                    "include": "#double-quote-string"
                }
            ]
        },
        "single-quote-string": {
            "name": "string.single.quoted.bcss",
            "begin": "'",
            "end": "'",
            "patterns": [
                {
                    "name": "string.escaped.bcss",
                    "match": "\\\\."
                }
            ]
        },
        "double-quote-string": {
            "name": "string.double.quoted.bcss",
            "begin": "\"",
            "end": "\"",
            "patterns": [
                {
                    "name": "string.escaped.bcss",
                    "match": "\\\\."
                }
            ]
        },
        "section-root-block": {
            "name": "meta.root.section.bcss",
            "begin": "\\s*(.+)\\s*\\{(?=[^\\{])",
            "end": "\\}",
            "beginCaptures": {
                "1": {
                    "name": "root.section.name.bcss"
                }
            },
            "patterns": [
                {
                    "include": "#in-section-root-patterns"
                }
            ]
        },
        "in-section-root-patterns": {
            "patterns": [
                {
                    "include": "#end-instruct-separator"
                },
                {
                    "include": "#comment"
                },
                {
                    "include": "#single-line-comment"
                },
                {
                    "include": "#describ-comment"
                },
                {
                    "include": "#selection-tag-definition"
                },
                {
                    "include": "#property-definition"
                },
                {
                    "include": "#section-root-block"
                }
            ]
        },
        "describ-comment": {
            "name": "comment.describ.comment.bcss",
            "begin": "^\\s*#\\s+",
            "end": "$",
            "patterns": [
                {
                    "match": "([\\w\\-]+)(\\s+[\\w\\-]+)+",
                    "captures": {
                        "1": {
                            "name": "directive.name.bcss"
                        },
                        "2": {
                            "name": "directive.value.bcss",
                            "patterns": [
                                {
                                    "include": "#value-definition"
                                }
                            ]
                        }
                    }
                }
            ]
        },
        "native-css-function": {
            "name": "native.css.function.bcss",
            "begin": "\\b(clamp|calc|format|min|max|minmax|toggle|round|mod|rem|(a)?(cos|sin|tan(2)?)|pow|sqrt|hypot|log|exp|abs|sign|rgb|hsl|(ok)?(lch|lab)|color(-mix)?|device-cmyk|light-dark|attr|env|url|var|view|scroll|linear|steps|cubic-bezier|rotate|scale|translate|translate(X(Y(Z)?)?))\\b\\s*(\\()?",
            "end": "\\)",
            "beginCaptures": {
                "1": {
                    "name": "native.css.function.name.bcss"
                }
            },
            "patterns": [
                {
                    "match": ",",
                    "name": "punctuation.separator.bcss"
                },
                {
                    "match": "\\s+(/|\\+|-|%|\\*)\\s+",
                    "name": "operator.property.separator.bcss"
                },
                {
                    "include": "#string"
                },
                {
                    "include": "#length-with-unit"
                },
                {
                    "include": "#meaning-words"
                },
                {
                    "include": "#css-name"
                }
            ]
        },
        "native-css-animation-function": {
            "name": "constant.native.css.ease.func.bcss",
            "match": "\\b(scroll|view)\\b"
        },
        "native-css-ease-function": {
            "name": "constant.native.css.ease.func.bcss",
            "match": "\\b(linear|steps|cubics-bezier)\\b"
        },
        "selector-tag": {
            "name": "constant.bcss"
        },
        "property-separator": {
            "name": "operator.property.separator.bcss",
            "match": "\\s*(:)\\s*"
        },
        "end-instruct-separator": {
            "name": "operator.property.end.bcss",
            "match": "\\s*(;)\\s*"
        },
        "web-known-colors": {
            "name": "constant.color.web.bcss",
            "match": "\\b(aliceblue|antiquewhite|aqua|aquamarine|azure|beige|bisque|black|blanchedalmond|blue|blueviolet|brown|burlywood|cadetblue|chartreuse|chocolate|coral|cornflowerblue|cornsilk|crimson|currentcolor|cyan|darkblue|darkcyan|darkgoldenrod|darkgray|darkgreen|darkgrey|darkkhaki|darkmagenta|darkolivegreen|darkorange|darkorchid|darkred|darksalmon|darkseagreen|darkslateblue|darkslategray|darkslategrey|darkturquoise|darkviolet|deeppink|deepskyblue|dimgray|dimgrey|dodgerblue|firebrick|floralwhite|forestgreen|fuchsia|gainsboro|ghostwhite|gold|goldenrod|gray|green|greenyellow|grey|honeydew|hotpink|indianred|indigo|ivory|khaki|lavender|lavenderblush|lawngreen|lemonchiffon|lightblue|lightcoral|lightcyan|lightgoldenrodyellow|lightgray|lightgreen|lightgrey|lightpink|lightsalmon|lightseagreen|lightskyblue|lightslategray|lightslategrey|lightsteelblue|lightyellow|lime|limegreen|linen|magenta|maroon|mediumaquamarine|mediumblue|mediumorchid|mediumpurple|mediumseagreen|mediumslateblue|mediumspringgreen|mediumturquoise|mediumvioletred|midnightblue|mintcream|mistyrose|moccasin|navajowhite|navy|oldlace|olive|olivedrab|orange|orangered|orchid|palegoldenrod|palegreen|paleturquoise|palevioletred|papayawhip|peachpuff|peru|pink|plum|powderblue|purple|red|rosybrown|royalblue|saddlebrown|salmon|sandybrown|seagreen|seashell|sienna|silver|skyblue|slateblue|slategray|slategrey|snow|springgreen|steelblue|tan|teal|thistle|tomato|transparent|turquoise|violet|wheat|white|whitesmoke|yellow|yellowgreen)\\b"
        },
        "property-definition": {
            "name": "meta.property.definition.bcss",
            "comment": "property definition",
            "begin": "\\b([a-z\\-]+)\\s*(:)?",
            "end": "(;|(?=\\}))",
            "beginCaptures": {
                "1": {
                    "name": "constant.property.name.bcss"
                },
                "2": {
                    "name": "punctuation.separator.bcss",
                    "patterns": [
                        {
                            "include": "#property-separator"
                        }
                    ]
                }
            },
            "patterns": [
                {
                    "include": "#match-value-definition"
                }
            ]
        },
        "match-value-definition": {
            "patterns": [
                {
                    "match": "\\s*(:)\\s*",
                    "comment": "line operator segment after new line",
                    "captures": {
                        "1": {
                            "name": "punctuation.separator.bcss",
                            "patterns": [
                                {
                                    "include": "#property-separator"
                                }
                            ]
                        }
                    }
                },
                {
                    "include": "#value-definition"
                }
            ]
        },
        "value-definition": {
            "name": "value.definition.bcss",
            "patterns": [
                {
                    "name": "operator.property.separator.bcss",
                    "match": ","
                },
                {
                    "include":"#system-block-definition"
                },
                {
                    "include": "#string"
                },
                {
                    "include": "#web-litteral-var"
                },
                {
                    "include": "#web-known-colors"
                },
                {
                    "include": "#hex-colors"
                },
                {
                    "include": "#time-constant-unit"
                },
                {
                    "include": "#angle-with-unit"
                },
                {
                    "include": "#frequency-with-unit"
                },
                {
                    "include": "#length-with-unit"
                },
                {
                    "include": "#function-handler-patterns"
                },
                {
                    "include": "#meaning-words"
                }
            ]
        },
        "meaning-words": {
            "patterns": [
                {
                    "include": "#meaning-a"
                },
                {
                    "include": "#meaning-b"
                },
                {
                    "include": "#meaning-c"
                },
                {
                    "include": "#meaning-d"
                },
                {
                    "include": "#meaning-e"
                },
                {
                    "include": "#meaning-f"
                },
                {
                    "include": "#meaning-g"
                },
                {
                    "include": "#meaning-h"
                },
                {
                    "include": "#meaning-i"
                },
                {
                    "include": "#meaning-j"
                },
                {
                    "include": "#meaning-k"
                },
                {
                    "include": "#meaning-l"
                },
                {
                    "include": "#meaning-m"
                },
                {
                    "include": "#meaning-n"
                },
                {
                    "include": "#meaning-o"
                },
                {
                    "include": "#meaning-p"
                },
                {
                    "include": "#meaning-q"
                },
                {
                    "include": "#meaning-r"
                },
                {
                    "include": "#meaning-s"
                },
                {
                    "include": "#meaning-t"
                },
                {
                    "include": "#meaning-u"
                },
                {
                    "include": "#meaning-v"
                },
                {
                    "include": "#meaning-w"
                },
                {
                    "include": "#meaning-x"
                },
                {
                    "include": "#meaning-y"
                },
                {
                    "include": "#meaning-z"
                },
                {
                    "include": "#meaning-property"
                }
            ]
        },
        "meaning-property": {
            "name": "constant.css.meaning.word.bcss",
            "match": "\\b(static|sans-serif|serif|monospace|emoji|math|cursive|float|auto|relative|absolute|flex|inline-block|inherit|initial|current(c|C)olor)\\b"
        },
        "meaning-a": {
            "name": "constant.css.meaning.word.bcss",
            "match": "\\b(auto|alphabetic|additive)\\b"
        },
        "meaning-b": {
            "name": "constant.css.meaning.word.bcss",
            "match": "\\b(block|both)\\b"
        },
        "meaning-c": {
            "name": "constant.css.meaning.word.bcss",
            "match": "\\b(checkbox|cyclic)\\b"
        },
        "meaning-e": {
            "name": "constant.css.meaning.word.bcss",
            "match": "\\b(ease(-(in|out|inout))?)\\b"
        },
        "meaning-f": {
            "name": "constant.css.meaning.word.bcss",
            "match": "\\b(fixed|false)\\b"
        },
        "meaning-i": {
            "name": "constant.css.meaning.word.bcss",
            "match": "\\b(initial|inherit|inline(-(start|end))?)\\b"
        },
        "meaning-l": {
            "name": "constant.css.meaning.word.bcss",
            "match": "\\b(left)\\b"
        },
        "meaning-v": {
            "name": "constant.css.meaning.word.bcss",
            "match": "\\b(v(isible))\\b"
        },
        "meaning-n": {
            "name": "constant.css.meaning.word.bcss",
            "match": "\\b(none|numeric)\\b"
        },
        "meaning-r": {
            "name": "constant.css.meaning.word.bcss",
            "match": "\\b(revert(-layer)?|right)\\b"
        },
        "meaning-s": {
            "name": "constant.css.meaning.word.bcss",
            "match": "\\b(symbols|symbolic)\\b"
        },
        "meaning-t": {
            "name": "constant.css.meaning.word.bcss",
            "match": "\\b(top|true)\\b"
        },
        "meaning-u": {
            "name": "constant.css.meaning.word.bcss",
            "match": "\\b(unset)\\b"
        },
        "function-handler-patterns": {
            "patterns": [
                {
                    "begin": "\\b(calc)\\b\\s*\\(",
                    "end": "\\)",
                    "beginCaptures": {
                        "1": {
                            "name": "native.css.function.name.calc"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#calc-constant"
                        },
                        {
                            "include": "#css-operators"
                        },
                        {
                            "include": "#value-definition"
                        }
                    ]
                },
                {
                    "begin": "\\b(url)\\b\\s*\\(",
                    "end": "\\)",
                    "beginCaptures": {
                        "1": {
                            "name": "native.css.function.name.url"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#string"
                        },
                        {
                            "include": "#url-params"
                        }
                    ]
                },
                {
                    "begin": "\\b(format)\\b\\s*\\(",
                    "end": "\\)",
                    "beginCaptures": {
                        "1": {
                            "name": "native.css.function.name.url"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#string"
                        }
                    ]
                },
                {
                    "include": "#native-css-function"
                }
            ]
        },
        "time-constant-unit": {
            "name": "constant.type.time.bcss",
            "match": "(-|\\+)?((\\d+)?\\.)?\\d+((m)?s)"
        },
        "length-with-unit": {
            "name": "constant.type.length.bcss",
            "match": "(-)?(((\\d+)?\\.)?\\d+(Q|fr|dpi|dpcm|dppx|x|cm|mm|em|rem|in|pt|ex|ch|cap|ic|lh|r(cap|ch|em|ex|ic|lh)|(d|l|s)?(vh|vw)|vb|vi|vmin|vmax|cq(b|h|i|max|min|w)|%)|\\d+px|\\d+(\\.\\d+)?)"
        },
        "angle-with-unit": {
            "name": "constant.type.angle.bcss",
            "match": "(-)?(((\\d+)?\\.)?\\d+(deg|rad|grad|turn))"
        },
        "frequency-with-unit": {
            "name": "constant.type.frequency.bcss",
            "match": "(-)?(((\\d+)?\\.)?\\d+((k)?Hz))"
        },
        "url-params": {
            "patterns": [
                {
                    "include": "string"
                },
                {
                    "name": "constant.url.bcss",
                    "match": "(?i)(((ftp|http(s)|[a-z]+)?:(\\/{,2}))|(\\.)|\\s*)[^\\s\\/\\)]+(\\/[^\\s\\/\\)]+)*(\\/)?"
                }
            ]
        },
        "selection-tag-definition-o": {
            "comment": "sect css expression tags",
            "name": "constant.selection.tag.bcss",
            "begin": "((\\>|\\+|~|,)\\s*)?(\\.|\\#)?[\\-\\w]+(\\[.*\\])*(:{1,2}[\\-a-z][a-z0-9\\-]*)*(\\{)?",
            "end": "}",
            "beginCaptures": {},
            "endCaptures": {},
            "patterns": []
        },
        "calc-constant": {
            "name": "constant.css.calc.bcss",
            "match": "NaN|(?i)\\b(pi|e)\\b"
        },
        "css-operators": {
            "match": "\\s*(\\+|/|-|%|\\*)\\s*",
            "captures": {
                "1": {
                    "name": "punctuation.operator.bcss"
                }
            }
        },
        "hex-colors": {
            "match": "\\s*(#([0-9a-f]{8}|[\\da-f]{6}|[\\da-f]{4}|[\\da-f]{3}))\\s*",
            "captures": {
                "1": {
                    "name": "constant.type.hex.color.bcss"
                }
            }
        },
        "brank-selection": {
            "begin": "\\[",
            "end": "\\]",
            "patterns": [
                {
                    "include": "#string"
                },
                {
                    "match": "((~|\\^|\\||\\$|\\*)?=)",
                    "name": "punctuation.operator.bcss"
                }
            ]
        },
        "speudo-func-selection": {
            "begin": "\\(",
            "end": "\\)",
            "patterns": [
                {
                    "include": "#string"
                }
            ]
        },
        "global-directive": {
            "patterns": [
                {
                    "include": "#global-directive-import"
                },
                {
                    "include": "#global-colors-directive"
                },
                {
                    "include": "#global-directive-media"
                }
            ]
        },
        "global-directive-import": {
            "begin": "\\s*@\\b(import|apply|global)\\b",
            "end": "$",
            "name": "meta.global.directive.bcss",
            "patterns": [
                {
                    "include": "#url"
                },
                {
                    "include": "#string"
                },
                {
                    "include": "#value-import-url-definition"
                }
            ]
        },
        "global-directive-media": {
            "begin": "\\s*(@\\b(def|(x(x)?)?(sm|lg)(-screen)?|root))\\b",
            "end": "$",
            "beginCaptures": {
                "1": {
                    "name": "meta.global.directive.media.bcss"
                }
            },
            "patterns": [
                {
                    "include": "#block-capture"
                }
            ]
        },
        "global-colors-directive": {
            "begin": "\\s*(@\\b(colors)\\b)",
            "end": "$",
            "beginCaptures": {
                "1": {
                    "name": "meta.global.directive.colors.bcss"
                }
            },
            "patterns": [
                {
                    "match": "\\b(light|dark)\\b",
                    "name": "constant.directive.theme.bcss"
                },
                {
                    "include": "#block-capture"
                }
            ]
        },
        "page-rule": {
            "begin": "\\s*@\\b(page)\\b",
            "end": "$",
            "name": "meta.global.directive.bcss",
            "patterns": [
                {
                    "name": "constant.selector.bcss",
                    "match": ":\\b(first|left|right)\\b"
                },
                {
                    "include": "#block-capture"
                }
            ]
        },
        "list-rule": {
            "begin": "\\s*@\\b(list)\\b",
            "end": "$",
            "name": "meta.global.directive.bcss",
            "patterns": [
                {
                    "begin":"\\[",
                    "end":"\\]",
                    "name":"constant.list.array.bcss",
                    "patterns":[
                        {
                            "include":"#value-definition"
                        },
                        {
                            "match":",",
                            "name":"punctuation.separator.bcss"
                        }
                    ]
                },
                {
                    "include": "#list-block-capture"
                }
            ]
        },
        "list-block-capture":{
            "begin":"\\{",
            "end":"\\}",
            "name": "meta.block.capture.bcss",
            "endCaptures": {
                "0": {
                    "name": "meta.block.end.capture.bcss"
                }
            },
            "patterns":[
                {
                    "include":"#list-selector-class"
                },
                {
                    "include": "#inside-block"
                }
            ]
        },
        "list-selector-class":{
            "match":"\\s*\\.[\\w\\-%]+(\\\\%[\\w\\-%]+)*",
            "name":"native.css.type.class.bcss"
        },
        "supports-rule": {
            "begin": "\\s*(@\\b(supports)\\b)",
            "end": "$",
            "beginCaptures": {
                "1": {
                    "name": "meta.global.directive.bcss"
                }
            },
            "patterns": [
                {
                    "name": "operator.property.separator.bcss",
                    "match": "\\s*\\b(and|or)\\b\\s*"
                },
                {
                    "begin": "\\(",
                    "end": "\\)",
                    "patterns": [
                        {
                            "name": "constant.property.name.bcss",
                            "match": "[\\w\\-]+"
                        },
                        {
                            "begin": "\\s*(:)\\s*",
                            "end": "(?=\\))",
                            "beginCaptures": {
                                "1": {
                                    "name": "property.css.punctuation.bcss"
                                }
                            },
                            "patterns": [
                                {
                                    "include": "#value-definition"
                                }
                            ]
                        }
                    ]
                },
                {
                    "include": "#block-capture"
                }
            ]
        },
        "keyframes-rule": {
            "begin": "\\s*(@\\b(keyframes))\\b",
            "end": "$",
            "beginCaptures": {
                "1": {
                    "name": "meta.global.directive.keyframes.bcss"
                }
            },
            "patterns": [
                {
                    "name": "constant.keyframe.name.bcss",
                    "match": "\\b([\\w\\-_]+)\\b"
                },
                {
                    "include": "#block-capture-keyframes"
                }
            ]
        },
        "font-face-rule": {
            "begin": "\\s*(@\\b(font-face))\\b",
            "end": "$",
            "beginCaptures": {
                "1": {
                    "name": "meta.global.directive.fontface.bcss"
                }
            },
            "patterns": [
                {
                    "include": "#block-capture"
                }
            ]
        },
        "color-profile-rule": {
            "begin": "\\s*(@\\b(color-profile))\\b",
            "end": "$",
            "beginCaptures": {
                "1": {
                    "name": "meta.global.directive.color.profile.bcss"
                }
            },
            "patterns": [
                {
                    "match": "\\b([\\w\\-]+)",
                    "name": "constant.property.name.bcss"
                },
                {
                    "include": "#block-capture"
                }
            ]
        },
        "container-rule": {
            "begin": "\\s*(@\\b(container))\\b",
            "end": "$",
            "beginCaptures": {
                "1": {
                    "name": "meta.global.directive.container.bcss"
                }
            },
            "patterns": [
                {
                    "include": "#inside-block-conditional"
                },
                {
                    "include": "#condition-block"
                },
                {
                    "match": "\\b([\\w\\-]+)\\b\\s*",
                    "captures": {
                        "1": {
                            "name": "constant.property.name.container.bcss"
                        }
                    }
                },
                {
                    "include": "#block-capture"
                }
            ]
        },
        "media-rule": {
            "begin": "\\s*(@\\b(media))\\b",
            "end": "$",
            "beginCaptures": {
                "1": {
                    "name": "meta.global.directive.media.bcss"
                }
            },
            "patterns": [
                {
                    "include": "#inside-block-conditional"
                },
                {
                    "include": "#media-constant-operator"
                },
                {
                    "include": "#condition-operator-litteral"
                },
                {
                    "include": "#condition-block"
                },
                {
                    "include": "#block-capture"
                }
            ]
        },
        "charset-rule": {
            "begin": "\\s*(@\\b(charset))\\b",
            "end": "$|;",
            "beginCaptures": {
                "1": {
                    "name": "meta.global.directive.charset.bcss"
                }
            },
            "endCaptures": {
                "0": {
                    "match": ";",
                    "name": "property.css.punctuation.bcss"
                }
            },
            "patterns": [
                {
                    "include": "#string"
                }
            ]
        },
        "document-rule": {
            "begin": "\\s*(@\\b(document))\\b",
            "end": "$|;",
            "beginCaptures": {
                "1": {
                    "name": "meta.global.directive.charset.bcss"
                }
            },
            "endCaptures": {
                "0": {
                    "match": ";",
                    "name": "property.css.punctuation.bcss"
                }
            },
            "patterns": [
                {
                    "match": ","
                },
                {
                    "begin": "\\b(url(-prefix)?|domain|regexp)\\b",
                    "end": "(?=,|{)",
                    "beginCaptures": {
                        "1": {
                            "name": "native.css.function.name.bcss"
                        }
                    },
                    "patterns": [
                        {
                            "begin": "\\(",
                            "end": "\\)",
                            "patterns": [
                                {
                                    "include": "#string"
                                },
                                {
                                    "include": "#url-params"
                                }
                            ]
                        },
                        {
                            "include": "#block-capture"
                        }
                    ]
                },
                {
                    "include": "#block-capture"
                }
            ]
        },
        "namespace-rule": {
            "begin": "\\s*(@\\b(namespace))\\b",
            "end": "$|;",
            "beginCaptures": {
                "1": {
                    "name": "meta.global.directive.charset.bcss"
                }
            },
            "endCaptures": {
                "0": {
                    "match": ";",
                    "name": "property.css.punctuation.bcss"
                }
            },
            "patterns": [
                {
                    "include": "#string"
                }
            ]
        },
        "counter-style-rule": {
            "begin": "\\s*(@\\b(counter-style))\\b",
            "end": "$",
            "beginCaptures": {
                "1": {
                    "name": "meta.global.directive.counter.style.bcss"
                }
            },
            "patterns": [
                {
                    "include": "#css-name"
                },
                {
                    "include": "#counter-style-block-capture"
                }
            ]
        },
        "counter-style-block-capture": {
            "patterns": [
                {
                    "begin": "\\{",
                    "end": "\\}",
                    "name": "meta.block.counter.style.block.bcss",
                    "patterns": [
                        {
                            "begin": "\\b(system|speak-as|pad|range|suffix|prefix|negative|additive-symbols|symbol)\\b",
                            "end": ";|$|(?=\\})",
                            "beginCaptures": {
                                "1": {
                                    "name": "constant.counter.style.property.bcss"
                                }
                            },
                            "patterns": [
                                {
                                    "include": "#match-value-definition"
                                }
                            ]
                        },
                        {
                            "include": "#property-definition"
                        }
                    ]
                }
            ]
        },
        "css-name": {
            "match": "-*\\b[\\w\\-]+\\b",
            "name": "constant.property.name.bcss"
        },
        "block-capture-keyframes": {
            "begin": "\\{",
            "end": "\\}",
            "patterns": [
                {
                    "name": "constant.keyframe.timeline.bcss",
                    "match": "(\\d+%|from|to)"
                },
                {
                    "include": "#block-capture"
                }
            ]
        },
        "system-block-definition": {
            "begin": "\\[",
            "end": "\\]",
            "name": "meta.global.array.def.bcss",
            "patterns": [
                {
                    "begin": "\\s*\\b((sys)?(f|bg)?cl|varp|trans|transform|uri|filter|prop|pr|anim(ation)?|ft|(bg)?res|sys)\\b\\s*",
                    "end": "(?=])",
                    "beginCaptures": {
                        "1": {
                            "name": "constant.global.ref.attribute.bcss"
                        }
                    },
                    "patterns": [
                        {
                            "match": ":|,",
                            "name": "punctuation.operator.bcss"
                        },
                        {
                            "include": "#value-definition"
                        },
                        {
                            "include": "#value-url-definition"
                        }
                    ]
                }
            ]
        },
        "value-url-definition": {
            "match": "(\\.(\\.)?\\/?|http(s)?:\\/\\/)[\\w0-9]+([\\w\\-_\\.]+)?(\/[\\w\\-\\.0-9]+)*",
            "name": "constant.url.bcss"
        },
        "value-import-url-definition": {
            "match": "(\\s*|\\.(\\.)?\\/?|http(s)?:\\/\\/)[\\w0-9]+([\\w\\-_\\.]+)?(\/[\\w\\-\\.0-9]+)*",
            "name": "constant.url.bcss"
        },
        "web-litteral-var": {
            "match": "\\s*(-)+[\\w\\-]+",
            "name": "constant.type.litteral.var.bcss"
        },
        "condition-block": {
            "begin": "\\(",
            "end": "\\)",
            "name": "constant.condition.block.bcss",
            "endCaptures": {
                "0": {
                    "name": "constant.condition.block.end.bcss"
                }
            },
            "beginCaptures": {
                "0": {
                    "name": "constant.condition.block.start.bcss"
                }
            },
            "patterns": [
                {
                    "name": "constant.property.condition.name.bcss",
                    "match": "[\\w\\-]+"
                },
                {
                    "begin": ":",
                    "end": "(?=\\))",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.separator.bcs"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#value-definition"
                        }
                    ]
                }
            ]
        },
        "condition-value-definition": {
            "patterns": [
                {
                    "begin": "(([^\\)]+)|\\s*)\\)",
                    "end": "\\{|\\(",
                    "beginCaptures": {
                        "1": {
                            "patterns": [
                                {
                                    "include": "#value-definition"
                                }
                            ]
                        }
                    },
                    "endCaptutes": {
                        "0": {
                            "name": "end.def"
                        }
                    },
                    "patterns": [
                        {
                            "match": "(\\b(and|or)\\b|,)",
                            "name": "punctuation.operator"
                        }
                    ]
                }
            ]
        },
        "media-constant-operator": {
            "name": "constant.media.operator.bcss",
            "match": "\\b(screen|landscape|only|not|printer|speach)\\b"
        },
        "condition-operator-litteral": {
            "name": "operator.property.separator.bcss",
            "match": "\\s*\\b(and|or)\\b\\s*"
        },
        "inside-block-conditional": {
            "patterns": [
                {
                    "begin": "(?<=\\))\\s*\\{",
                    "end": "\\}",
                    "summary": "try detect inline to pblock",
                    "name": "meta.block.capture.bcss",
                    "patterns": [
                        {
                            "include": "#inside-block"
                        }
                    ]
                },
                {
                    "begin": "(?<=\\))",
                    "end": "(?=\\(|\\{)",
                    "name": "select.inside-block",
                    "endCaptures": {
                        "0": {
                            "name": "local.end.capture"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#condition-operator-litteral"
                        }
                    ]
                }
            ]
        },
        "inside-block": {
            "patterns": [
                {
                    "include": "#inline-block-directive"
                },
                {
                    "include": "#property-block"
                },
                {
                    "include": "#block-capture"
                }
            ]
        },
        "property-block": {
            "patterns": [
                {
                    "include": "#comment"
                },
                {
                    "include": "#single-line-comment"
                },
                {
                    "include": "#describ-comment"
                },
                {
                    "begin": "\\s*\\b([\\w\\-]+)\\b((:)?:(hover))",
                    "end":"$|(?<=\\})",
                    "comment":"start with speudo-class",
                    "beginCaptures": {
                        "1": {
                            "name": "constant.property.name.bcss"
                        },
                        "2": {
                            "name": "native.css.type.pseudo.class.bcss"
                        }
                    },
                    "patterns":[
                        {"include":"#inline-selector"},
                        {"include":"#block-capture"}
                    ]
                },
                {
                    "summary": "direct property detection, local.prop",
                    "match": "\\s*([\\w-]+)\\s*(:)(.+)(;|$)",
                    "captures": {
                        "1": {
                            "name": "constant.property.name.bcss"
                        },
                        "2": {
                            "name": "property.css.punctuation"
                        },
                        "3": {
                            "patterns": [
                                {
                                    "include": "#value-definition"
                                }
                            ]
                        }
                    }
                },
                {
                    "name": "start.read.value",
                    "begin": "\\s*(:)\\s*",
                    "end": ";|(?=\\})",
                    "endCaptures": {
                        "0": {
                            "name": "end.read.value"
                        }
                    },
                    "beginCaptures": {
                        "1": {
                            "name": "property.css.punctuation"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#value-definition"
                        }
                    ]
                },
                {
                    "include": "#system-block-definition"
                },
                {
                    "include": "#root-property"
                }
            ]
        },
        "inline-block-directive": {
            "patterns": [
                {
                    "include": "#global-directive-rule"
                },
                {
                    "include": "#custom-directive-rule"
                }
            ]
        },
        "global-directive-rule": {
            "begin": "\\s*(@\\b(global|apply))\\b",
            "end": "$|;",
            "beginCaptures": {
                "1": {
                    "name": "meta.global.directive.charset.bcss"
                }
            },
            "endCaptures": {
                "0": {
                    "match": ";",
                    "name": "property.css.punctuation.bcss"
                }
            },
            "patterns": [
                {
                    "include": "#string"
                },
                {
                    "include": "#css-name"
                },
                {
                    "name": "property.css.punctuation.bcss",
                    "match": ","
                }
            ]
        },
        "custom-directive-rule": {
            "begin": "\\s*(@\\b([\\w\\-]+))\\b",
            "end": "$|;",
            "beginCaptures": {
                "1": {
                    "name": "meta.global.directive.custom.bcss"
                }
            },
            "endCaptures": {
                "0": {
                    "match": ";",
                    "name": "property.css.punctuation.bcss"
                }
            },
            "patterns": [
                {
                    "include": "#string"
                },
                {
                    "include": "#css-name"
                },
                {
                    "name": "property.css.punctuation.bcss",
                    "match": ","
                }
            ]
        },
        "font-feature-values-rule": {
            "begin": "\\s*(@\\b(font-feature-values))\\b",
            "end": "$|;",
            "beginCaptures": {
                "1": {
                    "name": "meta.global.directive.charset.bcss"
                }
            },
            "endCaptures": {
                "0": {
                    "match": ";",
                    "name": "property.css.punctuation.bcss"
                }
            },
            "patterns": [
                {
                    "match": ","
                },
                {
                    "begin": "\\b(url(-prefix)?|domain|regexp)\\b",
                    "end": "(?=,|{)",
                    "beginCaptures": {
                        "1": {
                            "name": "native.css.function.name.bcss"
                        }
                    },
                    "patterns": [
                        {
                            "begin": "\\(",
                            "end": "\\)",
                            "patterns": [
                                {
                                    "include": "#string"
                                },
                                {
                                    "include": "#url-params"
                                }
                            ]
                        },
                        {
                            "include": "#block-capture"
                        }
                    ]
                },
                {
                    "include": "#block-capture"
                }
            ]
        },
        "layer-rule": {
            "begin": "\\s*(@\\b(layer))\\b",
            "end": "$|;",
            "beginCaptures": {
                "1": {
                    "name": "meta.global.directive.layer.rule.bcss"
                }
            },
            "endCaptures": {
                "0": {
                    "match": ";",
                    "name": "property.css.punctuation.bcss"
                }
            },
            "patterns": [
                {
                    "match": ","
                },
                {
                    "begin": "\\b(url(-prefix)?|domain|regexp)\\b",
                    "end": "(?=,|{)",
                    "beginCaptures": {
                        "1": {
                            "name": "native.css.function.name.bcss"
                        }
                    },
                    "patterns": [
                        {
                            "begin": "\\(",
                            "end": "\\)",
                            "patterns": [
                                {
                                    "include": "#string"
                                },
                                {
                                    "include": "#url-params"
                                }
                            ]
                        },
                        {
                            "include": "#block-capture"
                        }
                    ]
                },
                {
                    "include": "#block-capture"
                }
            ]
        },
        "property-rule": {
            "begin": "\\s*(@\\b(property))\\b",
            "end": "$|;",
            "beginCaptures": {
                "1": {
                    "name": "meta.global.directive.charset.bcss"
                }
            },
            "endCaptures": {
                "0": {
                    "match": ";",
                    "name": "property.css.punctuation.bcss"
                }
            },
            "patterns": [
                {
                    "match": ",",
                    "name": "property.css.punctuation.bcss"
                },
                {
                    "include": "#css-name"
                },
                {
                    "include": "#block-capture"
                }
            ]
        }
    }
}